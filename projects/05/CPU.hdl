// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /*--  Instruction PINS    --
    [15] OP: 0=A | 1=D. Decides how to use the instruction, A saves it into A as a number, D turns it into Register(s)=Operation;JUMP.
    [14..13] null
    [12] a: 0=A | 1=M. A or M[A] is used as the ALU input.
    [11..6] c1-c6: Control the ALU's behaviour, NX, ZX, NY, ZY...
    [5..3] d1-d3: d1=A | d2=D | d3=M. Tells the respective memory to register the current value from ALU.
    [2..0] j1-j3: j1=- | j2=0 | j3=+. Decides whether PC jumps to A address in ROM, compares D operation to 0.
    --                      --*/
    /* -- A Register -- Holds a value and is used as address for M or ROM or as an int for ALU. */
    ARegister(in=dataA, load=loadA, out=A, out[0..14]=addressM);
    /* Will register instruction as number when notOP, or from ALU when d1 and OP are on. Fed as address to RAM. */
    Not(in=instruction[15], out=notOP);
    And(a=instruction[15], b=instruction[5], out=d1); // d1
    Mux16(a=instruction, b=ALUOut, sel=d1, out=dataA);
    Or(a=notOP, b=d1, out=loadA);

    /* -- D Register -- Holds a value from ALU, used as a sort of cache to hold a value between instructions without A side effects. */
    DRegister(in=ALUOut, load=d2, out=D);
    /* Will register when OP and d2 are on. */
    And(a=instruction[15], b=instruction[4], out=d2); // d2

    /* d3 is fed out to memory to signal the RAM to register the value */
    And(a=instruction[15], b=instruction[3], out=writeM); //d3

    /* -- ALU -- Carries out operations, fed all the control bits in order 11-6, and 2 values, (A or M) and D*/
    /* It can add numbers or it can do -1, simply output only X (in order to feed and register x(D) into A or M), etc... */
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);
    /* a bit decides whether ALU operates on A or M */
    Mux16(a=A, b=inM, sel=OPanda, out=AM);
    And(a=instruction[15], b=instruction[12], out=OPanda);

    /* -- ProgramCounter -- Selects the ROM address, by default it will keep adding 1 to itself, */
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
    /* As it needs jump logic we check every condition and it's pin, for positive we check if zr and ng are off */
    And(a=ng, b=instruction[2], out=j1);
    And(a=zr, b=instruction[1], out=j2);
    And(a=positive, b=instruction[0], out=j3);
    And(a=NotZero, b=NotNegative, out=positive);
    Not(in=zr, out=NotZero);
    Not(in=ng, out=NotNegative);

    /* If OP on and any of the checks, then load A into PC */
    And(a=isjump, b=instruction[15], out=jump);
    Or(a=j1, b=j2, out=j1orj2);
    Or(a=j1orj2, b=j3, out=isjump);
}
