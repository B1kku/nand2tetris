// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /*
    Instruction PIN
    [0] OP: 0==A instruction (A records ins[14]);
    
    */
    Not(in=instruction[15], out=NotOP);
    //When op(D type instruction), and d1(A), A is selected as destination, therefore it's loaded from ALU.
    And(a=instruction[15], b=instruction[5], out=d1);
    // A is registering when OP is A(0) or A is selected.
    Or(a=NotOP, b=d1, out=Aload);
    // Select whether A's input is the instruction or ALU's out(when it's selected to store data).
    Mux16(a=instruction, b=ALUOut, sel=d1, out=Adata);
    ARegister(in=Adata, load=Aload, out=A, out[0..14]=addressM);
    //Select whether ALU will use A or M based on a instruction (pin 12)
    And(a=instruction[15], b=instruction[12], out=OPanda);
    Mux16(a=A, b=inM, sel=OPanda, out=AM);

    //writeM --d3
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    //D Register, registering when op 1 and D is destination.
    And(a=instruction[15], b=instruction[4], out=d2);
    DRegister(in=ALUOut, load=d2, out=D);

    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);

    // -- PC Load logic --
    And(a=ng, b=instruction[2], out=j1);
    And(a=zr, b=instruction[1], out=j2);
    Not(in=zr, out=NotZero);
    Not(in=ng, out=NotNegative);
    And(a=NotZero, b=NotNegative, out=positive);
    And(a=positive, b=instruction[0], out=j3);
    Or(a=j1, b=j2, out=j1orj2);
    Or(a=j1orj2, b=j3, out=isjump);
    And(a=isjump, b=instruction[15], out=jump);
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
